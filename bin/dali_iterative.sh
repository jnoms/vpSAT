#!/usr/bin/env bash

#------------------------------------------------------------------------------#
# Defining usage and setting inputs
#------------------------------------------------------------------------------#
usage() {
        echo "
        This script conducts DALI alignment between one query file and an iterative
        DALI database generated by dali_make_iteractive_db.sh.

        Required params:
        -q --QUERY {path}
            Path to the query .dat file.
        -t --ITERATIVE_DB_DIR {path}
            Path to the iteratuve dali database directory generated by
            dali_make_interactive_db.sh
        -o --OUTFILE {path}
            Path to the output alignment file - will be a parsed .m8 file.
        -D --PATH_TO_DALI_SCRIPT
            Path to dali.sh, which is used to run dali.

        Optional params:
        -f --OUTPUT_FORMAT {comma-delimited list} [summary,equivalences,transrot]
            This is a comma-delimited list of the DALI outpits to incldue. Summary 
            is the most important information about the alignments. transrot is 
            highly useful for rotating target structures after alignment. The additional
            field is alignments.
        -s --SYMMETRY {oneway,twoway} ['oneway'] 
            Options are oneway or twoway. If oneway is specified, will use the --oneway
            switch. This is a substaintial speedup.
        -n --THREADS {int} [1]
            The number of threads to use. CRITICAL: If set to more than 1, will be using
            MPI to handle the multithreading. On SGE, need to add #$ -pe mpi N (where N
            is the number of THREADS/the value of this commandline option) and may also
            need to module load mpi. mpirun is assumed to be at the path 
            /usr/lib64/openmpi/bin/mpirun - if you want to adjust the mpi path, need
            to make a commandline input for the --MPIRUN_EXE flag of dali.pl.
        -N --QUERY_NAME {str} [""]
            If specified, will add this as the query name to the output file. If not
            specified, sat.py aln_parse_dali will look for the query name in the
            key, or leave it blank if that is not found either.
        "
}

#If less than 3 options are input, show usage and exit script.
if [ $# -le 4 ] ; then
        usage
        exit 1
fi

#Setting input
while getopts q:t:o:D:f:s:n:N: option ; do
        case "${option}"
        in
                q) QUERY=${OPTARG};;
                t) ITERATIVE_DB_DIR=${OPTARG};;
                o) OUTFILE=${OPTARG};;
                D) PATH_TO_DALI_SCRIPT=${OPTARG};;
                f) OUTPUT_FORMAT=${OPTARG};;
                s) SYMMETRY=${OPTARG};;
                n) THREADS=${OPTARG};;
                N) QUERY_NAME=${OPTARG};;
        esac
done

#------------------------------------------------------------------------------#
# Set defaults and constants
#------------------------------------------------------------------------------#
# Defaults
OUTPUT_FORMAT=${OUTPUT_FORMAT:-"summary,equivalences,transrot"}
SYMMETRY=${SYMMETRY:-oneway}
THREADS=${THREADS:-1}
QUERY_NAME=${QUERY_NAME:-""}

#------------------------------------------------------------------------------#
# Validate inputs and program availablity
#------------------------------------------------------------------------------#
if ! command -v dali.pl ; then
    echo "dali.pl not detected!"
    exit 1
fi

if [[ $THREADS != 1 ]] ; then
    if ! command -v /usr/lib64/openmpi/bin/mpirun ; then
        echo "You are attempting to multithread, but "
        echo "mpirun not detected at /usr/lib64/openmpi/bin/mpirun!"
        exit 1
    fi
fi

if [[ ! -f $PATH_TO_DALI_SCRIPT ]] ; then
    echo "Cannot find dali.sh at $PATH_TO_DALI_SCRIPT"
    exit 1
fi


# Check that all required files in the iterative db exist
if [[ ! -f $ITERATIVE_DB_DIR/dat_file_key.txt ]] ; then
    echo "Cannot find $ITERATIVE_DB_DIR/dat_file_key.txt!"
    exit 1
fi

if [[ $PATH_TO_DALI_SCRIPT == "" ]] ; then
    echo "PATH_TO_DALI_SCRIPT is required!"
    exit 1
done

#------------------------------------------------------------------------------#
# Main
#------------------------------------------------------------------------------#
echo "
$0 inputs:

QUERY: $QUERY
ITERATIVE_DB_DIR: $ITERATIVE_DB_DIR
OUTFILE: $OUTFILE
PATH_TO_DALI_SCRIPT: $PATH_TO_DALI_SCRIPT
SYMMETRY: $SYMMETRY
THREADS: $THREADS
QUERY_NAME: $QUERY_NAME
"


# Make a temp directory to handle files
TEMP=${RANDOM}_${RANDOM}
mkdir $TEMP
mkdir -p $TEMP/query_dir
mkdir -p $TEMP/reps_search

# Copy the query 
cp $QUERY $TEMP/query_dir

# Run dali.sh on the reps
echo "Running DALI on representatives"
$PATH_TO_DALI_SCRIPT \
-q $TEMP/query_dir \
-t $ITERATIVE_DB_DIR/reps \
-o $TEMP/reps_search \
-n $THREADS \
-f $OUTPUT_FORMAT \
-s $SYMMETRY

# rename the output
cp $TEMP/reps_search/*txt $TEMP/reps_search/rep_search_out.txt

# Parse the reps search file
echo "Parsing representative output file"
sat.py aln_parse_dali \
-a $TEMP/reps_search/rep_search_out.txt \
-s $ITERATIVE_DB_DIR/dat_file_key.txt \
-o $TEMP/reps_search/rep_search_out.m8

# Parse the targets, and copy their .dat files to a dir in the temp directory
echo "Collecting hit structure members"
mkdir -p $TEMP/secondary_search
cut -f 2 $TEMP/reps_search/rep_search_out.m8 | while read LINE ; do 
    if [[ $LINE == "target" ]] ; then
        continue
    fi
    TARGET=${LINE%.pdb}
    cp $ITERATIVE_DB_DIR/clusters/$TARGET/*dat $TEMP/secondary_search
done

# Also copy the query into the secondary_search dir - this will give a self alignment
# and let aln_parse_dali know the qlen.
cp $QUERY $TEMP/secondary_search

# Run DALI on these clusters
echo "Running secondary DALI search on initial hit clusters"
$PATH_TO_DALI_SCRIPT \
-q $TEMP/query_dir \
-t $TEMP/secondary_search \
-o $TEMP/secondary_search \
-n $THREADS \
-f $OUTPUT_FORMAT \
-s $SYMMETRY

# rename the output
cp $TEMP/secondary_search/*txt $TEMP/secondary_search/secondary_search_out.txt

# Parse the secondary search file
echo "Parsing the secondary serach output file"
sat.py aln_parse_dali \
-a $TEMP/secondary_search/secondary_search_out.txt \
-s $ITERATIVE_DB_DIR/dat_file_key.txt \
-o $TEMP/secondary_search/secondary_search_out.m8 \
-n $QUERY_NAME

# Copy it to the specified output location
mkdir -p $(dirname $OUTFILE)
cp $TEMP/secondary_search/secondary_search_out.m8 $OUTFILE && rm -r $TEMP