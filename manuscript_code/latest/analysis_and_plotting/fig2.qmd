---
title: "fig2"
format: html
---
# Load packages
```{r, include=F}
library(tidyverse)
library(ggpointdensity)
library(hash)
library(pheatmap)
library(RColorBrewer)
library(viridis)
library(stringr) # for searching strtings for patterns eg str_count("1,2,3", ',') --> 2
library(patchwork)
library(svglite)

library(pheatmap)

library(igraph)
library(ggraph)
```

# Load associated code and data
```{r, include=F}
source("constants.R")
source("general_functions.R")
source("load_data.R")
```

# Plot - foldseek AA vs TMscore.
```{r}
struc_search_AA_vs_tmscore_plt <- foldseek_aln %>%
  filter(query != target) %>%
  
  ggplot() + 
  
  geom_pointdensity(
    aes(
      x = alntmscore,
      y = fident,
      )
  ) +
  geom_vline(
    xintercept = 0.4,
    linetype="dashed"
  ) + 
  ylab("Amino Acid\nPercentage Identity") +
  xlab("Structure Alignment TMscore") +
  theme_classic(base_size = 10) +
  theme(
        legend.position = "none",
        legend.background = element_rect(fill="white")
        ) +
  coord_cartesian(xlim=c(1, 0), ylim=c(0, 1)) +
  guides(color=guide_legend(title="Number of\nnearby points")) +
  scale_y_continuous(breaks=c(0, 0.5, 1), labels=c(0, 0.5, 1)) +
  scale_x_continuous(breaks=c(0, 0.5, 1), labels=c(0, 0.5, 1), trans="reverse")

struc_search_AA_vs_tmscore_plt
#ggsave("figs/separate/struc_search_AA_vs_tmscore_plt.png", struc_search_AA_vs_tmscore_plt, height=10, width=10, units="cm")

```

# Plot - # of families per cluster dist - compare seq and structure
```{r}
cluster_fam_counts <- clusters %>%
  select(cluster_ID, structure_rep, seq_rep, family) %>%
  pivot_longer(-c(cluster_ID, family)) %>%
  rename(rep_type = name, rep = value) %>%
  group_by(rep_type, rep) %>%
  distinct() %>%
  summarize(family_count = n()) %>%
  arrange(-family_count) %>%
  ungroup() %>%
  
  group_by(rep_type) %>%
  mutate(rank= row_number()) 


# Stats
fam_counts_plt_pval <- wilcox.test(
  cluster_fam_counts %>%
    filter(rep_type == "structure_rep") %>%
    filter(rank <=100) %>%
    pull(family_count),
  cluster_fam_counts %>%
    filter(rep_type == "seq_rep") %>%
    filter(rank <=100) %>%
    pull(family_count)
)
fam_counts_plt_pval <- paste("P=", round_sci(fam_counts_plt_pval$p.value), sep="")

cluster_fam_struc_vs_seq_plt <- cluster_fam_counts %>%
  
  mutate(rep_type = ifelse(rep_type == "seq_rep", "Sequence Only", "Structure and\nSequence")) %>%
  mutate(rep_type = factor(rep_type, ordered=T, levels=c("Sequence Only", "Structure and\nSequence"))) %>%
  
  ggplot() +
  
  geom_line(
    aes(x=rank, y=family_count, color=rep_type),
    size=1
  ) +
  annotate(geom="text", x=60, y=15, label=fam_counts_plt_pval) +
  
  coord_cartesian(xlim=c(0, 200)) +
  theme_classic(base_size=10) +
  ylab("Number of Families\nin Cluster") +
  xlab("Cluster Rank") +
  scale_color_manual(values=c("Structure and\nSequence" = "#B8D1E0", "Sequence Only" = "#F4A4AB")) +
  guides(color=guide_legend(title="Clustering Approach")) +
  theme(legend.position = c(0.65, 0.80),
        legend.background = element_rect(fill="white")) +
  scale_x_continuous(expand=c(0,0))
cluster_fam_struc_vs_seq_plt

#ggsave("figs/separate/cluster_fam_struc_vs_seq_plt.png", cluster_fam_struc_vs_seq_plt, height=10, width = 15, units="cm")

```

# Number of clusters with muti fam and multi genome types
```{r}

# Determine the total count, and add the difference to "One Family" count in the plot. So, the "One Family" will actually be "One *Assigned* Family
total_multi_member <- clusters %>%
  filter(cluster_count > 1) %>%
  select(cluster_ID) %>%
  distinct() %>%
  nrow()

# Also count the total number of cluster IDs
total <- clusters %>%
  select(cluster_ID) %>%
  distinct() %>%
  nrow()

single_member_count <- total - total_multi_member




cluster_classifications_by_struc <- clusters %>%
  filter(cluster_count > 1) %>%
  select(cluster_ID, family) %>%
  distinct() %>%
  filter(!is.na(family)) %>%
  #mutate(family = ifelse(is.na(family), "Unassigned Family", family)) %>%
  mutate(genome_type = hash_lookup(genome_types_hash, family)) %>%
  
  group_by(cluster_ID) %>%
  summarize(
    n_fam = n_distinct(family),
    n_genome_type = n_distinct(genome_type)
  ) %>%
  
  mutate(label = ifelse(n_fam == 1, "One\nFamily", "")) %>%
  mutate(label = ifelse(n_fam > 1, "Multiple\nFamilies", label)) %>%
  mutate(label = ifelse(n_genome_type > 1, "Multiple\nGenome\nTypes", label)) %>%
  
  group_by(label) %>%
  summarize(n = n()) %>%
  ungroup() %>%
  
  # Adjust One Family to include situations where the cluster_ID only had 
  # members without an assigned family
  mutate(c = sum(n)) %>%
  mutate(remaining = total_multi_member - c) %>%
  mutate(n = ifelse(label == "One\nFamily", n + remaining, n)) %>%
  select(-c(c, remaining)) %>%
  
  # Add a row with the single-member clusters
  rbind(
    tibble(label = "Single\nMember", n = single_member_count)
  ) %>%
  
  # other preparation
  mutate(label = factor(label, ordered=T, levels=c("Single\nMember", "One\nFamily", "Multiple\nFamilies", "Multiple\nGenome\nTypes"))) %>%
  mutate(number_label = round_to_k(n)) %>%
  mutate(number_label = ifelse(n < 400, n, number_label))

cluster_classifications_by_seq <- clusters %>%
  filter(cluster_count > 1) %>%
  select(seq_rep, family) %>%
  distinct() %>%
  filter(!is.na(family)) %>%
  #mutate(family = ifelse(is.na(family), "Unassigned Family", family)) %>%
  mutate(genome_type = hash_lookup(genome_types_hash, family)) %>%
  
  group_by(seq_rep) %>%
  summarize(
    n_fam = n_distinct(family),
    n_genome_type = n_distinct(genome_type)
  ) %>%
  
  mutate(label = ifelse(n_fam == 1, "One\nFamily", "")) %>%
  mutate(label = ifelse(n_fam > 1, "Multiple\nFamilies", label)) %>%
  mutate(label = ifelse(n_genome_type > 1, "Multiple\nGenome\nTypes", label)) %>%
  
  group_by(label) %>%
  summarize(n = n()) %>%
  ungroup() %>%
  
  # Adjust One Family to include situations where the cluster_ID only had 
  # members without an assigned family
  mutate(c = sum(n)) %>%
  mutate(remaining = total_multi_member - c) %>%
  mutate(n = ifelse(label == "One\nFamily", n + remaining, n)) %>%
  select(-c(c, remaining)) %>%
  
  # Add a row with the single-member clusters
  rbind(
    tibble(label = "Single\nMember", n = single_member_count)
  ) %>%
  
  # other preparation
  mutate(label = factor(label, ordered=T, levels=c("Single\nMember", "One\nFamily", "Multiple\nFamilies", "Multiple\nGenome\nTypes"))) %>%
  mutate(number_label = round_to_k(n)) %>%
  mutate(number_label = ifelse(n < 400, n, number_label))


cluster_classifications_plt <- rbind(
  cluster_classifications_by_seq %>%
    mutate(type = "Sequence Only"),
  cluster_classifications_by_struc %>%
    mutate(type = "Structure and\nSequence")
) %>%
  
  mutate(type = factor(type, ordered=T, levels=rev(c("Sequence Only", "Structure and\nSequence")))) %>%
  
  # REVISION - only include multiple genome types
  filter(label == "Multiple\nGenome\nTypes") %>%

  
  ggplot() +
  
  geom_col(
    aes(x=type, y=n, fill=type),
    position=position_dodge(width=1),
    show.legend = F
  ) +
  
  geom_text(
    aes(x=type, y=n + 2, label=number_label, group=type),
    position=position_dodge(width=1)
  ) +
  
  scale_y_continuous(expand = c(0,0)) +
  theme_classic(base_size=10) + 
  ylab("Number of Clusters With\nMultiple Genome Types") +
  theme(
    axis.title.x = element_blank()
  ) +
  scale_fill_manual(
    values = c("Sequence Only" = "#F4A4AB", "Structure and\nSequence" = "#B8D1E0"),
    breaks = c("Structure and\nSequence", "Sequence Only")
  ) +
  labs(fill = "Clustering Approach") +
  theme(legend.position = c(0.78, 0.9),
        legend.background = element_rect(fill="white")) +
  coord_cartesian(ylim=c(NA, 60))
  
cluster_classifications_plt
```


# IPS
```{r}
ips <- read_tsv("inputs/interproscan_PFAM_TIGRFAM_CDD.tsv",
                col_names = c("query", "md5", "qlen", "analysis", "signature_acc", "signature_desc", "start", "stop", "evalue", "status", "Date", "interpro_acc", "interpro_desc"))
```
# Classify annotated vs non-annotated sequence clusters
```{r}

ips_mapped <- ips %>%
  select(query) %>%
  distinct() %>%
  pull(query)

seq_reps_mapped <- clusters %>%
  mutate(ips_status = ifelse(cluster_member %in% ips_mapped, "mapped", "unmapped")) %>%
  group_by(seq_rep) %>%
  count(ips_status) %>%
  
  ungroup() %>%
  complete(seq_rep, ips_status, fill = list(n = 0)) %>%
  
  group_by(seq_rep) %>%
  mutate(total = sum(n)) %>%
  #filter(total > 1) %>%
  
  mutate(p = n/sum(n)) %>%
  filter(ips_status == "mapped")



dark_seq_reps <- seq_reps_mapped %>%
  filter(p < 0.25) %>%
  #filter(grepl("hypothetical", seq_rep) | grepl("Hypothetical", seq_rep) | grepl("putative", seq_rep) | grepl("Putative", seq_rep)) %>%
  pull(seq_rep)



mixed_struc_clusters <- clusters %>%
  select(cluster_ID, structure_rep, cluster_count, seq_rep) %>%
  distinct() %>%
  mutate(status = ifelse(seq_rep %in% dark_seq_reps, "Dark", "Bright")) %>%
  group_by(cluster_ID) %>%
  count(status) %>%
  
  ungroup() %>%
  complete(cluster_ID, status, fill = list(n = 0)) %>%
  
  pivot_wider(names_from = status, values_from = n, 
              names_prefix = "", values_fill = list(n = 0),
              names_glue = "{status}_n") %>%
  
  filter(Bright_n != 0, Dark_n != 0) %>%
  
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  pull(cluster_ID)


dark_notdark_reps <- clusters %>%
  group_by(cluster_ID, structure_rep, cluster_count) %>%
  mutate(n_seq_reps = n_distinct(seq_rep)) %>%
  ungroup() %>%
  
  filter(cluster_ID %in% mixed_struc_clusters) %>%
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  arrange(cluster_count) %>%
  
  filter(n_seq_reps >= 5) %>%
  
  select(cluster_ID, structure_rep, seq_rep) %>%
  distinct() %>%
  
  mutate(status = ifelse(seq_rep %in% dark_seq_reps, "Dark", "Not Dark"))






```

# Distribution of classifications for seq clusters
```{r}
# seq_reps_mapped %>%
#   ggplot() +
#   
#   stat_density(
#     aes(x=p)
#   ) +
#   geom_vline(
#     xintercept = c(0.25, 0.75),
#     linetype="dashed", 
#     color="grey"
#     ) +
#   annotate(
#     "text", x = 0.15, y = 2.8, label = "Unannotated\nSequence Cluster"
#     ) +
#   annotate(
#     "text", x = 0.95, y = 2.8, label = "Annotated\nSequence Cluster"
#     ) +
#   
#   xlab("Percentage of sequence\ncluster members with annotation") +
#   ylab("Density") +
#   theme_minimal() +
#   theme(panel.grid = element_blank())


# Doing a more complicated graphing so that I can color different parts of the density differently

# Compute the density
dens <- density(seq_reps_mapped$p)

# Create a data frame from the density object
dens_df <- data.frame(x = dens$x, y = dens$y)

# Subset for coloring
subset_dens_df <- subset(dens_df, x <= 0.25)

# Create the plot
seq_cluster_annotated_percents_plt <- ggplot() +
  geom_area(data = dens_df, aes(x = x, y = y), fill="#8b8b8b") +  # plot the full density curve
  geom_area(data = subset_dens_df, aes(x = x, y = y), fill = "red") +  # color the subset
  geom_vline(xintercept = c(0.25), linetype = "dashed", color = "grey") +
  #annotate("text", x = 0.15, y = max(dens_df$y) * 0.9, label = "Unannotated\nSequence Cluster") +
  xlab("Percentage of sequence\ncluster members with InterProScan classification") +
  ylab("Density") +
  theme_classic(base_size=10) +
  theme(panel.grid = element_blank()) +
  coord_cartesian(xlim=c(0,1)) +
  scale_x_continuous(expand=c(0,0)) +
  scale_y_continuous(expand = c(0,0))

seq_cluster_annotated_percents_plt




```

# Determine members that are annotated, connected to a seq cluster that is annotated, or unannotated
```{r}
bright_seq_reps <- seq_reps_mapped %>%
  filter(p >= 0.25) %>%
  pull(seq_rep)

cluster_IDs_with_bright_seq_reps <- clusters %>%
  filter(seq_rep %in% bright_seq_reps) %>%
  pull(cluster_ID) %>%
  unique()


protein_classifications_plt <- clusters %>%
  filter(cluster_count > 1) %>%
  mutate(
    status = case_when(
      cluster_member %in% ips_mapped ~ "Annotated",
      (seq_rep %in% bright_seq_reps) & (! cluster_member %in% ips_mapped ) ~ "Sequence Cluster\nHas Annotation",
      (!seq_rep %in% bright_seq_reps) & (! cluster_member %in% ips_mapped ) & (cluster_ID %in% cluster_IDs_with_bright_seq_reps) ~ "Protein Cluster\nHas Annotation"
    )
  ) %>%
  mutate(status = ifelse(is.na(status), "Unannotated",  status)) %>%
  mutate(status = factor(status, ordered=T, levels=c("Annotated", "Sequence Cluster\nHas Annotation", "Protein Cluster\nHas Annotation", "Unannotated"))) %>%
  count(status) %>%
  
  ggplot() +
  
  geom_col(
    aes(x=status, y=n, fill=status),
    show.legend = F
  ) +
  geom_text(
    aes(x=status, y=n + 1500, label=round_to_k(n))
  ) +
  
  scale_fill_manual(values = c("Annotated" = "#8b8b8b", "Sequence Cluster\nHas Annotation" = "red", "Protein Cluster\nHas Annotation" = "red", "Unannotated" = "red")) +
  theme_classic(base_size=10) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(expand = c(0,0)) +
  ylab("Number of Proteins\nIn Non-singleton Clusters") +
  theme(
    panel.grid.minor = element_blank(),
    axis.title.x = element_blank(),
    panel.grid.major.x = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  coord_cartesian(ylim=c(NA, 39000))

protein_classifications_plt

```



# Assemble
```{r}
# The top plots
top <- struc_search_AA_vs_tmscore_plt +
  cluster_fam_struc_vs_seq_plt +
  cluster_classifications_plt +
  plot_layout(nrow=1)

middle <- plot_spacer() +
  seq_cluster_annotated_percents_plt +
  protein_classifications_plt

fig2 <- top / middle + plot_annotation(title = "Figure 2: Structural alignments link annotated and unannotated sequence clusters", tag_levels = list(c("A", "B", "C", "E", "F")))
  

ggsave("figs/agg/fig2.png", fig2, height=13, width=20, units="cm")
```

# Readin in AF2 foldseek alignment
```{r}
# af2 <- read_tsv("inputs/full_euk_vs_af2db.filt.tax.m8")
# 
# 
# # AF2 included the multi PART (split) proteins - I need to remove those from consideration
# pr_list <- clusters %>%
#   pull(cluster_member) %>%
#   paste(., ".pdb", sep="")
# 
# af2 <- af2 %>%
#   filter(query %in% pr_list)
# 
# af2_mapped_list <- af2 %>%
#   pull(query) %>%
#   unique() %>%
#   str_replace_all(".pdb", "")
```



# Isolating unannotated sequence reps with more than one cluster member
```{r}

benchmarking_set <- seq_reps_mapped %>%
  filter(p < 0.25, total > 1) %>%
  pull(seq_rep)
length(benchmarking_set) # 4409


plddts <- read_tsv("inputs/plddts.txt", col_names = c("name", "plddt"))



final_benchmark_set <- plddts %>%
  mutate(name = str_replace_all(name, ".pdb", "")) %>%
  filter(name %in% benchmarking_set) %>%
  filter(plddt >= 70) %>%
  pull(name)

length(final_benchmark_set) # 1326

final_benchmark_set %>%
  tibble() %>%
  write_tsv("outputs/2024-05-02_benchmark_set.txt")



```
