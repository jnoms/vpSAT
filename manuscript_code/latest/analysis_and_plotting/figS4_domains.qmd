---
title: "figS4"
format: html
---

# Load packages
```{r, include=F}
library(tidyverse)
library(ggpointdensity)
library(hash)
library(pheatmap)
library(RColorBrewer)
library(viridis)
library(stringr) # for searching strtings for patterns eg str_count("1,2,3", ',') --> 2
library(patchwork)
library(svglite)

library(pheatmap)

library(igraph)
library(ggraph)
```

# Load associated code and data
```{r, include=F}
source("constants.R")
source("general_functions.R")
source("load_data.R")
```


# DALI EvE for domains - AA ID vs Z
```{r}
dali_eve_nr <- dali_eve %>%

  # Here - remove situations where a query-target pair are also present as a target-query pair
  rowwise() %>%
  mutate(pair = list(sort(c(query, target)))) %>%
  ungroup() %>%
  mutate(pair_id = map_chr(pair, ~ paste(.x, collapse = "-"))) %>%
  distinct(pair_id, .keep_all = TRUE) %>%
  select(-pair, -pair_id)

dali_eve_aa_vs_z_plt <- dali_eve_nr %>%
  
  ggplot() +
  
  geom_point(
    aes(x=z, y=pident)
  ) +
  
  theme_minimal() +
  xlab("DALI Z Score") +
  ylab("AA Percent Identity") +
  guides(color=guide_legend(title="Coverage")) +
  ggtitle("Euk Viruses\nvs Euk Viruses") +
  scale_color_continuous(breaks = c(0.2, 0.4, 0.6, 0.8)) +
  coord_cartesian(xlim=c(0, 60), ylim=c(0, 100))


dali_eve_aa_vs_z_plt


```

# Network with Z > 15 for euk-euk alignments
```{r}

dali_eve_nr_z15 <- dali_eve_nr %>%
  filter(z > 15)


# Create a graph directly from dali_eve_nr
dali_eve_nr_graph <- graph_from_data_frame(dali_eve_nr_z15, directed = FALSE)

# Find the connected components
connections <- tibble(
  name = V(dali_eve_nr_graph)$name,
  connection_id = components(dali_eve_nr_graph)$membership
) 

# Shuffle the connection_ids - need to do this because colors are set 
# in numerical order during plotting
set.seed(100)
unique_ids <- unique(connections$connection_id)
shuffled_ids <- sample(unique_ids)
id_mapping <- setNames(shuffled_ids, unique_ids)
connections$connection_id <- id_mapping[connections$connection_id]


# Join connections to the original data frame
dali_eve_nr_z15.c <- left_join(dali_eve_nr_z15, connections, by = c("query" = "name"))

# Assign connection_ids to graph edges
E(dali_eve_nr_graph)$connection_id <- dali_eve_nr_z15.c$connection_id

# Compute the centroid of each cluster's nodes
layout_data <- create_layout(graph = dali_eve_nr_graph, layout = "fr")

# Add the connection_id to the layout data
layout_data <- left_join(layout_data, connections, by = "name")

centroids <- layout_data %>%
  group_by(connection_id) %>%
  summarize(x = mean(x), y = mean(y))



# Plot
eve_network_plt <- ggraph(dali_eve_nr_graph, layout = layout_data) + 
  geom_edge_link(aes(color = as.factor(connection_id)), alpha = 0.6, size = 1, show.legend = F) +
  geom_node_point(size = 1) + 
  theme_minimal() +
  theme(panel.grid = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank()
        ) 

eve_network_plt


V(dali_eve_nr_graph)$degree <- degree(dali_eve_nr_graph)
layout_data$degree <- V(dali_eve_nr_graph)$degree

V(dali_eve_nr_graph)$node_id <- seq_len(vcount(dali_eve_nr_graph))
layout_data$node_id <- V(dali_eve_nr_graph)$node_id


eve_network_NODES_LABELED_plt <- ggraph(dali_eve_nr_graph, layout = layout_data) + 
  geom_edge_link(aes(color = as.factor(connection_id)), alpha = 0.6, size = 1, show.legend = FALSE) +
  geom_text(aes(label = node_id, x = x, y = y), size = 3, vjust = 1.5, check_overlap = TRUE) +
  #geom_text(data = centroids, aes(x = x, y = y, label = connection_id), size=2, vjust=2) + 
  theme_minimal() +
  theme(panel.grid = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank()
        )
eve_network_NODES_LABELED_plt
ggsave("tmp/z15/eve_network_NODES_LABELED_plt.png", eve_network_NODES_LABELED_plt, height=50, width=50, units="cm")

node_key <- data.frame(
  node_id = V(dali_eve_nr_graph)$node_id,
  node_name = V(dali_eve_nr_graph)$name
)
node_key %>%
  write_tsv("tmp/z15/z15_node_key.tsv")
```





# Aggregate
```{r}


left <- dali_eve_aa_vs_z_plt/plot_spacer()


figS4 <-  (left |
  eve_network_plt) +
  plot_layout(widths = c(0.3, 1)) +
  plot_annotation(tag_levels = "A",
                  title = "Supplementary Fig. 4: Shared domains across protein clusters")

ggsave("figs/agg/SFig_domains.png", figS4, width=18, height=10, units="cm")
```


# Finding phage alignments
```{r}
dali_evp %>%
  filter(query == "collagen_repeat_protein__YP_007354240__Acanthamoeba_polyphaga_moumouvirus__1269028.pdb")

dali_evp %>%
  filter(query == "collagen_repeat_protein__YP_007354240__Acanthamoeba_polyphaga_moumouvirus__1269028.pdb")


```

# Find connection groups that have multiple genome types
```{r}





clusters %>%
  select(cluster_member, family) %>%
  distinct() %>%
  mutate(cluster_member = paste(cluster_member, ".pdb", sep="")) %>%
  right_join(
    connections %>%
      rename(cluster_member = name),
    by="cluster_member"
  ) %>%
  
  filter(!is.na(family)) %>%
  
  mutate(genome_type = hash_lookup(genome_types_hash, family)) %>%
  
  group_by(connection_id) %>%
  mutate(n_types = n_distinct(genome_type)) %>%
  arrange(-n_types, -connection_id)


connections %>%
  filter(name == "E1__YP_009507281__Felis_domesticus_papillomavirus_2__568209.pdb")

connections %>%
  filter(connection_id == 104)

```





#----------------------------------------------------------#
# TEMP/RESERVED
#----------------------------------------------------------#



# Network with those aligning to phage highlighted - less stringent Z filter
```{r}

# Create a graph directly from dali_eve_nr
dali_eve_nr_graph <- graph_from_data_frame(dali_eve_nr, directed = FALSE)

# Find the connected components
connections <- tibble(
  name = V(dali_eve_nr_graph)$name,
  connection_id = components(dali_eve_nr_graph)$membership
) 

# Shuffle the connection_ids - need to do this because colors are set 
# in numerical order during plotting
set.seed(100)
unique_ids <- unique(connections$connection_id)
shuffled_ids <- sample(unique_ids)
id_mapping <- setNames(shuffled_ids, unique_ids)
connections$connection_id <- id_mapping[connections$connection_id]


# Join connections to the original data frame
dali_eve_nr.c <- left_join(dali_eve_nr, connections, by = c("query" = "name"))

# Assign connection_ids to graph edges
E(dali_eve_nr_graph)$connection_id <- dali_eve_nr.c$connection_id

# Compute the centroid of each cluster's nodes
layout_data <- create_layout(graph = dali_eve_nr_graph, layout = "fr")

# Add the connection_id to the layout data
layout_data <- left_join(layout_data, connections, by = "name")

centroids <- layout_data %>%
  group_by(connection_id) %>%
  summarize(x = mean(x), y = mean(y))

# Label nodes that have a phage alignment
phage_aln_list <- dali_evp_nr %>%
  pull(query) %>%
  unique()
V(dali_eve_nr_graph)$highlight <- V(dali_eve_nr_graph)$name %in% phage_aln_list
layout_data$highlight <- V(dali_eve_nr_graph)$highlight


# Plot
eve_evp_network_plt <- ggraph(dali_eve_nr_graph, layout = layout_data) + 
  geom_edge_link(aes(width = z, color = as.factor(connection_id)), alpha = 0.6, size = 1, show.legend = FALSE) +
  geom_node_point(aes(color = ifelse(highlight, "red", "black")), size = 1) + 
  scale_color_manual(
    values = c("red" = "red", "black" = "black"),
    labels = c("Phage Alignment", "No Phage Alignment"),
    breaks = c("red", "black"),
    name = "Presence in Phage Dataset"
  ) +
  geom_text(data = centroids, aes(x = x, y = y, label = connection_id), size=2, vjust=2) + 
  theme_minimal() +
  theme(panel.grid = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank()
        )

eve_evp_network_plt
```


# Get names of specific nodes
```{r}
V(dali_eve_nr_graph)$degree <- degree(dali_eve_nr_graph)
layout_data$degree <- V(dali_eve_nr_graph)$degree

V(dali_eve_nr_graph)$node_id <- seq_len(vcount(dali_eve_nr_graph))
layout_data$node_id <- V(dali_eve_nr_graph)$node_id


eve_evp_network_NODES_LABELED_plt <- ggraph(dali_eve_nr_graph, layout = layout_data) + 
  geom_edge_link(aes(width = z, color = as.factor(connection_id)), alpha = 0.6, size = 1, show.legend = FALSE) +
  geom_node_point(aes(color = ifelse(highlight, "red", "black")), size = 1) + 
  geom_text(aes(label = node_id, x = x, y = y), size = 3, vjust = 1.5, check_overlap = TRUE) +
  scale_color_manual(
    values = c("red" = "red", "black" = "black"),
    labels = c("Phage Alignment", "No Phage Alignment"),
    breaks = c("red", "black"),
    name = "Presence in Phage Dataset"
  ) +
  #geom_text(data = centroids, aes(x = x, y = y, label = connection_id), size=2, vjust=2) + 
  theme_minimal() +
  theme(panel.grid = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank()
        )
eve_evp_network_NODES_LABELED_plt

node_key <- data.frame(
  node_id = V(dali_eve_nr_graph)$node_id,
  node_name = V(dali_eve_nr_graph)$name
)


ggsave("tmp/eve_evp_network_NODES_LABELED_plt.png", eve_evp_network_NODES_LABELED_plt, width=50, height=50, units="cm")
write_tsv(node_key, "tmp/eve_evp_network_NODES_LABELED.key.tsv")
```




# TMP
```{r}

multi_fam_cluster_ID_list <- clusters %>%
  select(cluster_ID, family) %>%
  distinct() %>%
  group_by(cluster_ID) %>%
  summarize(n = n()) %>%
  filter(n > 1) %>%
  pull(cluster_ID)


clusters %>%
  
  filter(grepl("ypothetical", cluster_member)) %>%
  filter(cluster_count > 1) %>%
  
  filter(cluster_ID %in% multi_fam_cluster_ID_list)





```






