---
title: "FigS2"
format: html
---
# Load packages
```{r, include=F}
library(tidyverse)
library(ggpointdensity)
library(hash)
library(pheatmap)
library(RColorBrewer)
library(viridis)
library(stringr) # for searching strtings for patterns eg str_count("1,2,3", ',') --> 2
library(patchwork)
library(svglite)

library(pheatmap)

library(igraph)
library(ggraph)
```

# Load associated code and data
```{r, include=F}
source("constants.R")
source("general_functions.R")
source("load_data.R")
```

# IPS
```{r}
ips <- read_tsv("inputs/interproscan_PFAM_TIGRFAM_CDD.tsv",
                col_names = c("query", "md5", "qlen", "analysis", "signature_acc", "signature_desc", "start", "stop", "evalue", "status", "Date", "interpro_acc", "interpro_desc"))
```

# Classify annotated vs non-annotated sequence clusters
```{r}

ips_mapped <- ips %>%
  select(query) %>%
  distinct() %>%
  pull(query)

seq_reps_mapped <- clusters %>%
  mutate(ips_status = ifelse(cluster_member %in% ips_mapped, "mapped", "unmapped")) %>%
  group_by(seq_rep) %>%
  count(ips_status) %>%
  
  ungroup() %>%
  complete(seq_rep, ips_status, fill = list(n = 0)) %>%
  
  group_by(seq_rep) %>%
  mutate(total = sum(n)) %>%
  #filter(total > 1) %>%
  
  mutate(p = n/sum(n)) %>%
  filter(ips_status == "mapped")



dark_seq_reps <- seq_reps_mapped %>%
  filter(p < 0.25) %>%
  #filter(grepl("hypothetical", seq_rep) | grepl("Hypothetical", seq_rep) | grepl("putative", seq_rep) | grepl("Putative", seq_rep)) %>%
  pull(seq_rep)



mixed_struc_clusters <- clusters %>%
  select(cluster_ID, structure_rep, cluster_count, seq_rep) %>%
  distinct() %>%
  mutate(status = ifelse(seq_rep %in% dark_seq_reps, "Dark", "Bright")) %>%
  group_by(cluster_ID) %>%
  count(status) %>%
  
  ungroup() %>%
  complete(cluster_ID, status, fill = list(n = 0)) %>%
  
  pivot_wider(names_from = status, values_from = n, 
              names_prefix = "", values_fill = list(n = 0),
              names_glue = "{status}_n") %>%
  
  filter(Bright_n != 0, Dark_n != 0) %>%
  
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  pull(cluster_ID)


dark_notdark_reps <- clusters %>%
  group_by(cluster_ID, structure_rep, cluster_count) %>%
  mutate(n_seq_reps = n_distinct(seq_rep)) %>%
  ungroup() %>%
  
  filter(cluster_ID %in% mixed_struc_clusters) %>%
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  arrange(cluster_count) %>%
  
  filter(n_seq_reps >= 5) %>%
  
  select(cluster_ID, structure_rep, seq_rep) %>%
  distinct() %>%
  
  mutate(status = ifelse(seq_rep %in% dark_seq_reps, "Dark", "Not Dark"))

```


# Network - stress layout
```{r}

set.seed(100)

# Create an edge list
edges <- dark_notdark_reps %>%
  select(structure_rep, seq_rep)

# Create an igraph object
graph <- graph_from_data_frame(edges, directed = FALSE)

# Add node attributes for coloring and cluster_IDs
V(graph)$status <- rep(NA, vcount(graph))
V(graph)$cluster_ID <- rep(NA, vcount(graph))
# Assign status only to seq_rep nodes, and cluster_ID to structure_rep nodes
for(i in 1:nrow(dark_notdark_reps)) {
  # Assign status to seq_rep nodes
  V(graph)[name == dark_notdark_reps$seq_rep[i]]$status <- dark_notdark_reps$status[i]

  # Assign cluster_ID to structure_rep nodes (assuming it's consistent for each structure_rep)
  V(graph)[name == dark_notdark_reps$structure_rep[i]]$cluster_ID <- dark_notdark_reps$cluster_ID[i]
}

# Identify representative nodes for each cluster
clusters_graph <- clusters(graph)
rep_nodes <- sapply(1:max(clusters_graph$membership), function(x) {
  which(clusters_graph$membership == x)[1]  # Selects the first node in each cluster
})

# Map cluster_IDs to representative nodes
cluster_labels <- setNames(V(graph)$cluster_ID[rep_nodes], V(graph)$name[rep_nodes])

# Create a temporary ggraph plot to get node positions
temp_plot <- ggraph(graph, layout = 'stress') + geom_node_point()
temp_data <- ggplot_build(temp_plot)$data[[1]]  # Extract node positions from the plot

# Combine temp_data with cluster_ID
node_positions <- data.frame(name = V(graph)$name, x = temp_data$x, y = temp_data$y, cluster_ID = V(graph)$cluster_ID)

# Calculate centroids of each cluster
centroid_data <- aggregate(cbind(x, y) ~ cluster_ID, node_positions, min) %>% mutate(y = y-0.5)

# Plot using ggraph
stress_network_labeled_plt <- ggraph(graph, layout = 'stress') +
  geom_edge_link(width = 0.1) +
  geom_node_point(aes(color = status, alpha = status), show.legend = F) +
  geom_label(data = centroid_data, aes(x = x, y = y, label = cluster_ID),
             label.size = 0, label.padding = unit(0.1, "lines"),
             label.r = unit(0.1, "lines"), vjust = 2, check_overlap = TRUE, fill = "white") +
  theme_graph() +
  scale_color_manual(values = c("Dark" = "red", "Not Dark" = "black")) +
  scale_alpha_manual(values = c("Dark" = 1, "Not Dark" = 0.5))

stress_network_unlabeled_plt <- ggraph(graph, layout = 'stress') +
  geom_edge_link(width = 0.1) +
  geom_node_point(aes(color = status, alpha = status), show.legend = F) +
  # geom_label(data = centroid_data, aes(x = x, y = y, label = cluster_ID),
  #            label.size = 0, label.padding = unit(0.1, "lines"),
  #            label.r = unit(0.1, "lines"), vjust = 2, check_overlap = TRUE, fill = "white") +
  theme_graph() +
  scale_color_manual(values = c("Dark" = "red", "Not Dark" = "black")) +
  scale_alpha_manual(values = c("Dark" = 1, "Not Dark" = 0.5))

stress_network_labeled_plt
#ggsave("figs/separate/stress_network_labeled_plt.png", stress_network_labeled_plt, height=20, width=20, units="cm")
#ggsave("figs/separate/stress_network_unlabeled_plt.png", stress_network_unlabeled_plt, height=20, width=20, units="cm")
```


