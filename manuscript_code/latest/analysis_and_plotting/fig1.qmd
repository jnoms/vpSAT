---
title: "fig1"
format: html
---

# Load packages
```{r, include=F}
library(tidyverse)
library(ggpointdensity)
library(hash)
library(pheatmap)
library(RColorBrewer)
library(viridis)
library(stringr) # for searching strtings for patterns eg str_count("1,2,3", ',') --> 2
library(patchwork)
library(svglite)

library(pheatmap)

library(igraph)
library(ggraph)
```

# Load associated code and data
```{r, include=F}
source("constants.R")
source("general_functions.R")
source("load_data.R")
```


# Taxa counts
```{r}
taxa_counts_plt <- clusters %>%
  summarize(
    phylum = n_distinct(phylum),
    class = n_distinct(class),
    order = n_distinct(order),
    family = n_distinct(family),
    genus = n_distinct(genus),
    species = n_distinct(species)
  ) %>%
  mutate(x = 0) %>%
  pivot_longer(-x) %>%
  select(-x) %>%
  rename(level = name, count = value) %>%
  mutate(level = factor(level, ordered=T, levels=rev(c("phylum", "class", "order", "family", "genus", "species")))) %>%
  
  ggplot() +
  
  geom_col(
    aes(x=level, y = count),
    show.legend = F,
    fill = "#B8D1E0"
  ) +
  geom_text(
    aes(x=level, y = count*1.3, label=count)
  ) +
  
  scale_y_continuous(trans="log10", expand = c(0,0)) +
  theme_classic() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        panel.grid.major.y = element_line(linetype="dashed")) +
  coord_cartesian(ylim=c(NA, 8000)) +
  xlab("Taxonomic Level") +
  ylab("Number of Taxa")

taxa_counts_plt
```


# plddt distribution
```{r}
plddts <- read_tsv("inputs/plddts.txt", col_names = c("name", "plddt"))


plddt_dist_plt <- plddts %>%
  
  ggplot() +
  
  stat_density(
        aes(x=plddt), 
        geom="line", position="identity"
  ) + 
  
  annotate(geom="text",
           x=median(plddts$plddt),
           y=0.04,
           label=median(plddts$plddt),
           size=4
           ) +
  
  
  # Aesthetics
  theme_classic() +
  scale_x_reverse(limits=c(100, 0)) + 
  ylab("Density") +
  xlab("Average pLDDT")

plddt_dist_plt

```

# Plot number of clusters per species in each molecule type
```{r}

# This is clusters per species
#-----------------------------------------------#
molecule_species_counts <- counts %>%
  filter(superkingdom == "Viruses", level=="species") %>%
  
  # Count # cluster_IDs per species
  group_by(taxon) %>%
  summarise(cluster_count = n()) %>%
  
  # Find family for each species
  mutate(family = hash_lookup(species_to_family_hash, taxon)) %>%
  mutate(family = ifelse(is.na(family), "X", family)) %>%
  
  # Convert family to genome type
  mutate(genome_type = hash_lookup(genome_types_hash, family)) %>%
  mutate(genome_type = ifelse(family == "X", "Unassigned Family", genome_type)) %>%
  mutate(molecule_type = ifelse(grepl("DNA", genome_type), "DNA", "RNA")) %>%
  mutate(molecule_type = ifelse(family == "X", "Unassigned Family", molecule_type)) %>%
  mutate(genome_type = factor(genome_type, ordered=T, levels=c("Unassigned Family", genome_type_order)))




molecule_species_counts_plt <- molecule_species_counts %>%

  ggplot() +
  
  geom_jitter(
    aes(x=genome_type, y=cluster_count),
    color="grey"
  ) + 
  geom_boxplot(
    aes(x=genome_type, y=cluster_count, fill=genome_type),
    outlier.shape = NA,
    alpha=0.5,
    show.legend = F
  ) +
  
  
  scale_y_continuous(trans="log10") +
  xlab("Virus Type") +
  ylab("Protein Clusters\nPer Species") +
  theme_classic() +
  scale_fill_manual(values=c(genome_type_colors, "Unassigned Family" = "grey")) +
  annotation_logticks(sides="l") +
  guides(fill=guide_legend(title="")) +
  theme(legend.position = c(0.5, 0.9),
        axis.text.x = element_text(angle=45, hjust=1))
molecule_species_counts_plt

#ggsave("figs/separate/molecule_species_counts_plt.png", molecule_species_counts_plt)


# This is total clusters per molecule type
#-----------------------------------------------#
molecule_species_counts %>%
  group_by(genome_type) %>%
  summarize(n = sum(cluster_count)) %>%
  arrange(-n)

# NOTE - this is slow. Takes like 30 seconds.
members_and_family_genome_types <- clusters %>%
  select(cluster_member, family) %>%
  mutate(genome_type = hash_lookup(genome_types_hash, family))

molecule_total_counts_by_molecule_type_plt <- members_and_family_genome_types %>%
  group_by(genome_type) %>%
  summarize(n = n()) %>%
  arrange(-n) %>%
  mutate(genome_type = ifelse(is.na(genome_type), "Unassigned Family", genome_type)) %>%
  mutate(genome_type = factor(genome_type, ordered=T, levels=c("Unassigned Family", genome_type_order))) %>%
  mutate(molecule_type = ifelse(grepl("DNA", genome_type), "DNA", "RNA")) %>%
  mutate(molecule_type = ifelse(genome_type == "Unassigned Family", "Unassigned Family", molecule_type)) %>%
  
    
  # More legible labels
  mutate(label = round_to_k(n)) %>%
  
  ggplot() +
  
  geom_col(
    aes(x=genome_type, y=n, fill=genome_type),
    show.legend = F
  ) +
  geom_text(
    aes(x=genome_type, y = n + 3000, label=label),
    size=3
  ) +
  
  theme_classic() +
  scale_fill_manual(values = c(genome_type_colors, "Unassigned Family" = "grey")) +
  xlab("Genome Type") +
  ylab("Total\nNumber of\nProteins") +
  theme(panel.grid.minor = element_blank()) +
  scale_y_continuous(expand=c(0,0)) +
  coord_cartesian(ylim=c(NA, 45000)) +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank())

molecule_total_counts_by_molecule_type_plt


# This is total # of families for each genome type
#-----------------------------------------------#
molecule_family_count_plt <- counts %>%
  filter(level == "family") %>%
  select(taxon) %>%
  distinct() %>%
  mutate(taxon = ifelse(is.na(taxon), "Unassigned Family", taxon)) %>%
  mutate(genome_type = hash_lookup(genome_types_hash, taxon)) %>%
  distinct() %>%
  
  group_by(genome_type) %>%
  summarize(family_count = n()) %>%
  mutate(family_count = ifelse(is.na(genome_type), 0, family_count)) %>%
  mutate(genome_type = ifelse(is.na(genome_type), "Unassigned Family", genome_type)) %>%
  mutate(genome_type = factor(genome_type, ordered=T, levels=c("Unassigned Family", genome_type_order))) %>%
  mutate(molecule_type = ifelse(grepl("DNA", genome_type), "DNA", "RNA")) %>%
  mutate(molecule_type = ifelse(genome_type == "Unassigned Family", "Unassigned Family", molecule_type)) %>%
  
  ggplot() +
  
  geom_col(
    aes(x=genome_type, y=family_count, fill=genome_type),
    show.legend = F
  ) +
  geom_text(
    aes(x=genome_type, y=family_count+ 8, label=family_count),
    show.legend = F
  ) +
  
  theme_classic() +
  scale_fill_manual(values = c(genome_type_colors, "Unassigned Family" = "grey")) +
  theme(
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  ) +
  ylab("Number of\nFamilies") +
  coord_cartesian(ylim=c(NA, 60))
molecule_family_count_plt


molecule_types_agg_plt <- molecule_total_counts_by_molecule_type_plt + 
  molecule_family_count_plt + 
  molecule_species_counts_plt +
  plot_layout(ncol=1, heights=c(0.4, 0.4, 1))

molecule_types_agg_plt


#ggsave("figs/separate/molecule_types_agg_plt.png", molecule_types_agg_plt, height=15, width=15, units="cm")
```



# aggregate
```{r}

left <- plot_spacer() / plot_spacer() / plot_spacer()

middle <- taxa_counts_plt +
  #multi_member_cluster_dist_plt +
  plddt_dist_plt +
  plot_layout(ncol=1)


plot_spacer() | middle + plot_layout(guides="auto") | molecule_types_agg_plt + plot_layout(guides="collect")


fig1 <- ((left | middle | molecule_types_agg_plt)) +
  plot_layout(guides="collect") +
  plot_annotation(tag_levels = list(c("B", "C", "D", "E", "F")))

ggsave("figs/agg/fig1.png", height=15, width=25, units="cm")

  
```



# Selecting structures to present at the bottom of the figure
```{r}
clusters_genome_types <- clusters %>%
  filter(!is.na(family)) %>%
  mutate(genome_type = hash_lookup(genome_types_hash, family)) %>%
  filter(!is.na(genome_type)) %>%
  # Almost certainly actually a rhabdovirus - it's misclassified!!!
  filter(species != "Cacao_swollen_shoot_Togo_A_virus")


# Get counts of families for each genome_type
genome_type_family_count <- clusters %>%
  select(family) %>%
  distinct()  %>%
  filter(!is.na(family)) %>%
  mutate(genome_type = hash_lookup(genome_types_hash, family)) %>%
  group_by(genome_type) %>%
  summarize(n_fams = n_distinct(family)) %>%
  filter(!is.na(genome_type))
genome_type_family_count_hash <- hash(genome_type_family_count$genome_type, genome_type_family_count$n_fams)




clusters_genome_types %>%
  group_by(genome_type, cluster_ID) %>%
  summarize(n_fams = n_distinct(family)) %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  ungroup() %>%
  
  group_by(genome_type) %>%
  arrange(genome_type, -n_fams, cluster_ID) %>%
  group_by(genome_type) %>%
  slice_head(n = 1) 



top_list <- clusters_genome_types %>%
  group_by(genome_type, cluster_ID) %>%
  summarize(n_fams = n_distinct(family)) %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  ungroup() %>%
  
  group_by(genome_type) %>%
  arrange(genome_type, -n_fams, cluster_ID) %>%
  group_by(genome_type) %>%
  slice_head(n = 1) %>%
  pull(cluster_ID) %>%
  unique() 


clusters %>%
  filter(cluster_ID %in% top_list) %>%
  select(cluster_ID, structure_rep) %>%
  distinct() %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID)
```


```{r}
# dsDNA (large)
# 16 DNA pol
# 30 ribonucleotide reductase small subunit
# 31 ribonucleotide reductase large subunit
# 5 kinase
# 6 helicase

# dsDNA medium
# 100 protease
# 13 thymidine kinase/ATP-binding

# dsDNA small
# 11 E1/LT

# RNA other
# 3 RdRP
# 1024 protease
# 237 weird either capsid or protease
# and more...

# ssDNA
# 1
# 4 rep
# 27 another rep
# 8 "replication enhancer" --- may be another rep?

# ssRNA(-)
# 12 nucleocapsid
# 58 a dif nucleocapsid


# ssRNA(+)
# 3 RdRP
# 1 capsid
# 14 protease


clusters %>%
  filter(cluster_ID == 5)




```

# LCA analysis and AFDB
```{r}
r_vs_AF2db_r <- read_tsv("inputs/vir_protein_reps_vs_AF2_reps.TMscorefilt.m8")

af2_mapped <- r_vs_AF2db_r %>%
  pull(query) %>%
  unique() %>%
  str_replace_all(".pdb", "")

# Get cluster_IDs for af2_mapped
af2_mapped_cluster_IDs <- clusters %>%
  filter(structure_rep %in% af2_mapped) %>%
  pull(cluster_ID) %>%
  unique()


LCA_and_AF2_status <- clusters %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  
  # Filtering for multi-member clusters
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  #filter(cluster_count >= 2) %>%
  
  # Get just the taxonomy for each cluster member in each cluster_ID
  select(cluster_ID, cluster_count, superkingdom, phylum, class, order, family, genus, species) %>%
  distinct() %>%
  
  # Pivot longer, remove NA taxa
  pivot_longer(-c("cluster_ID", "cluster_count")) %>%
  rename(level = name, taxon = value) %>%
  filter(!is.na(taxon)) %>%
  
  # Make sure each entry is ordered by taxonomy
  mutate(level = factor(level, ordered = T, levels=rev(c("superkingdom", "phylum", "class", "order", "family", "genus", "species")))) %>%
  arrange(level) %>%
  
  # Counting the number of taxa at each level. Filter for those levels with only one taxon
  group_by(cluster_ID, cluster_count, level) %>%
  summarize(n_taxa = n_distinct(taxon)) %>%
  filter(n_taxa == 1) %>%
  ungroup() %>%
  
  # Take the top level that has one taxon
  group_by(cluster_ID) %>%
  mutate(n = row_number()) %>%
  filter(n == 1) %>%
  ungroup() %>%
  
  mutate(status = ifelse(cluster_ID %in% af2_mapped_cluster_IDs, "Homolog in AFDB", "No Homolog in AFDB")) 


LCA_and_AF2_status_bar_plt <- LCA_and_AF2_status %>%
  
  group_by(level, status) %>%
  summarize(n = sum(cluster_count)) %>%

  mutate(p = n/sum(n)*100) %>%
  
  ggplot() +
  
  geom_col(
    aes(y=level, x = n, fill=status),
    show.legend = F
  ) +
  
  theme_classic(base_size=10) +
  scale_x_continuous(expand=c(0,0)) +
  scale_fill_manual(values=c("Homolog in AFDB" = "#B8D1E0", "No Homolog in AFDB" = "grey")) +
  ylab("Taxonomic Level of\nViral Last Common Ancestor") +
  xlab("Number of Proteins")
LCA_and_AF2_status_bar_plt

# Pie chart - Percentage of proteins with AFDB homologs
AFDB_homolog_pie_plt <- LCA_and_AF2_status %>%
  group_by(status) %>%
  summarize(count = sum(cluster_count)) %>%
  
  ggplot() +
  
  geom_col(
    aes(x=0, y=count, fill=status),
    show.legend = F
  ) +
  coord_polar(theta = "y") +
  theme_void() +
  scale_fill_manual(values = c("No Homolog in AFDB" = "grey", "Homolog in AFDB" = "#B8D1E0"))
AFDB_homolog_pie_plt


ggsave("figs/separate/LCA_and_AF2_status_bar_plt.png", LCA_and_AF2_status_bar_plt, height=10, width=10, units="cm")
ggsave("figs/separate/AFDB_homolog_pie_plt.png", AFDB_homolog_pie_plt, height=3, width=3, units="cm")
```

```{r}
clusters %>%
  select(cluster_ID, cluster_count) %>%
  distinct() 
```


# Statistics/numbers for paper for AFDB/LCA analysis
```{r}
# Percentage of proteins in cluster_IDs with LCA Family or below
LCA_and_AF2_status %>%
  mutate(status = ifelse(level %in% c("family", "genus", "species"), "Single Viral Family", "Multiple Viral Families")) %>%
  
  group_by(status) %>%
  summarize(n = sum(cluster_count)) %>%
  mutate(p = n/sum(n)*100)

# Percentage of proteins with LCA family or lower AND no AFDB homologs
LCA_and_AF2_status %>%
  mutate(family_status = ifelse(level %in% c("family", "genus", "species"), "Single Viral Family", "Multiple Viral Families")) %>%
  
  group_by(status, family_status) %>%
  summarize(n = sum(cluster_count)) %>%
  ungroup() %>%
  
  mutate(p = n/sum(n)*100)

# Percentage of proteins with AFDB homologs
LCA_and_AF2_status %>%
  group_by(status) %>%
  summarize(n = sum(cluster_count))
```



# STORAGE
#--------------------------------------------------------#






# DEV - looking for novel structures, not present in AF2db reps or in PDB
```{r}
r_vs_AF2db_r <- read_tsv("inputs/vir_protein_reps_vs_AF2_reps.TMscorefilt.m8")
r_vs_pdb <- read_tsv("inputs/vir_protein_reps_vs_pdb.TMscorefilt.m8")

af2_mapped <- r_vs_AF2db_r %>%
  pull(query) %>%
  unique() %>%
  str_replace_all(".pdb", "")

pdb_mapped <- r_vs_pdb %>%
  pull(query) %>%
  unique() %>%
  str_replace_all(".pdb", "")


clusters %>%
  filter(!structure_rep %in% c(af2_mapped, pdb_mapped)) %>%
  
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  filter(cluster_count >= 10) %>%
  
  # select(cluster_ID, structure_rep) %>%
  # distinct() %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  group_by(cluster_ID, structure_rep) %>%
  filter(!is.na(family)) %>%
  summarize(n_fam = n_distinct(family)) %>%
  pull(n_fam) %>%
  mean()


clusters %>%
  filter(structure_rep %in% c(af2_mapped, pdb_mapped)) %>%
  
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  filter(cluster_count >= 10) %>%
  
  # select(cluster_ID, structure_rep) %>%
  # distinct() %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  group_by(cluster_ID, structure_rep) %>%
  filter(!is.na(family)) %>%
  summarize(n_fam = n_distinct(family)) %>%
  pull(n_fam) %>%
  mean()



clusters %>%
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  filter(cluster_count > 1) %>%
  select(cluster_ID, structure_rep) %>%
  distinct() %>%
  mutate(AF2_status = ifelse(structure_rep %in% af2_mapped, "Mapped", "Not Mapped")) %>%
  count(AF2_status) %>%
  mutate(p = n /sum(n))

```

# For those that align against AF2db, assess their LCA
```{r}
clusters %>%
  filter(structure_rep %in% af2_mapped) %>%
  
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  filter(cluster_count >= 10)


filt_af2_mapped <- r_vs_AF2db_r %>%
  
  rowwise() %>%
  mutate(qcov = alnlen/qlen) %>%
  mutate(tcov = alnlen/tlen) %>%
  mutate(cov = min(qcov, tcov)) %>%
  ungroup() %>%
  
  filter(cov >= 0.7) %>%
  pull(query) %>%
  unique() %>%
  str_replace_all(".pdb", "")


clusters %>%
  filter(structure_rep %in% filt_af2_mapped) %>%
  
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  filter(cluster_count >= 10) %>%
  
  select(cluster_ID, structure_rep) %>%
  distinct()
```

# DEV - viral LCA
```{r}

clusters %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  
  # Filtering for multi-member clusters
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  filter(cluster_count >= 2) %>%
  
  # Get just the taxonomy for each cluster member in each cluster_ID
  select(cluster_ID, superkingdom, phylum, class, order, family, genus, species) %>%
  distinct() %>%
  
  # Pivot longer, remove NA taxa
  pivot_longer(-c("cluster_ID")) %>%
  rename(level = name, taxon = value) %>%
  filter(!is.na(taxon)) %>%
  
  # Make sure each entry is ordered by taxonomy
  mutate(level = factor(level, ordered = T, levels=rev(c("superkingdom", "phylum", "class", "order", "family", "genus", "species")))) %>%
  arrange(level) %>%
  
  # Counting the number of taxa at each level. Filter for those levels with only one taxon
  group_by(cluster_ID, level) %>%
  summarize(n_taxa = n_distinct(taxon)) %>%
  filter(n_taxa == 1) %>%
  ungroup() %>%
  
  # Take the top level that has one taxon
  group_by(cluster_ID) %>%
  mutate(n = row_number()) %>%
  filter(n == 1) %>%
  ungroup() %>%
  
  count(level) %>%
  mutate(p = n/sum(n)*100)



# Which ones are superkingdom?
clusters %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  
  # Filtering for multi-member clusters
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  filter(cluster_count >= 2) %>%
  
  # Get just the taxonomy for each cluster member in each cluster_ID
  select(cluster_ID, superkingdom, phylum, class, order, family, genus, species) %>%
  distinct() %>%
  
  # Pivot longer, remove NA taxa
  pivot_longer(-c("cluster_ID")) %>%
  rename(level = name, taxon = value) %>%
  filter(!is.na(taxon)) %>%
  
  # Make sure each entry is ordered by taxonomy
  mutate(level = factor(level, ordered = T, levels=rev(c("superkingdom", "phylum", "class", "order", "family", "genus", "species")))) %>%
  arrange(level) %>%
  
  # Counting the number of taxa at each level. Filter for those levels with only one taxon
  group_by(cluster_ID, level) %>%
  summarize(n_taxa = n_distinct(taxon)) %>%
  filter(n_taxa == 1) %>%
  ungroup() %>%
  
  # Take the top level that has one taxon
  group_by(cluster_ID) %>%
  mutate(n = row_number()) %>%
  filter(n == 1) %>%
  ungroup() %>%
  
  filter(level == "superkingdom")



# How many members fall into cluster_IDs at each group level?
clusters %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  
  # Filtering for multi-member clusters
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  filter(cluster_count >= 2) %>%
  
  # Get just the taxonomy for each cluster member in each cluster_ID
  select(cluster_ID, cluster_count, superkingdom, phylum, class, order, family, genus, species) %>%
  distinct() %>%
  
  # Pivot longer, remove NA taxa
  pivot_longer(-c("cluster_ID", "cluster_count")) %>%
  rename(level = name, taxon = value) %>%
  filter(!is.na(taxon)) %>%
  
  # Make sure each entry is ordered by taxonomy
  mutate(level = factor(level, ordered = T, levels=rev(c("superkingdom", "phylum", "class", "order", "family", "genus", "species")))) %>%
  arrange(level) %>%
  
  # Counting the number of taxa at each level. Filter for those levels with only one taxon
  group_by(cluster_ID, cluster_count, level) %>%
  summarize(n_taxa = n_distinct(taxon)) %>%
  filter(n_taxa == 1) %>%
  ungroup() %>%
  
  # Take the top level that has one taxon
  group_by(cluster_ID) %>%
  mutate(n = row_number()) %>%
  filter(n == 1) %>%
  ungroup()  %>%
  
  # How many members fall into cluster_IDs at each group level?
  group_by(level) %>%
  summarize(n_proteins = sum(cluster_count)) %>%
  ungroup() %>%
  
  mutate(p = n_proteins/sum(n_proteins)*100)
  

# Protein amount:
# 37% of proteins are genus-restricted, 37+25% family-restricted. Over 30% of proteins are in clusters that are present across multiple families. I think being in multiple families can be considered ubiquitous - this is a notable finding.

# clusters - with >=2 members
# 72% of clusters are only within a single genus
# 72+12 are within a single family
# 6% of clusters are spread across families.

# With >= 10 members, you get about ~25%ish of clusters present in multiple families. See below:

clusters %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  
  # Filtering for multi-member clusters
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  filter(cluster_count >= 10) %>%
  
  # Get just the taxonomy for each cluster member in each cluster_ID
  select(cluster_ID, superkingdom, phylum, class, order, family, genus, species) %>%
  distinct() %>%
  
  # Pivot longer, remove NA taxa
  pivot_longer(-c("cluster_ID")) %>%
  rename(level = name, taxon = value) %>%
  filter(!is.na(taxon)) %>%
  
  # Make sure each entry is ordered by taxonomy
  mutate(level = factor(level, ordered = T, levels=rev(c("superkingdom", "phylum", "class", "order", "family", "genus", "species")))) %>%
  arrange(level) %>%
  
  # Counting the number of taxa at each level. Filter for those levels with only one taxon
  group_by(cluster_ID, level) %>%
  summarize(n_taxa = n_distinct(taxon)) %>%
  filter(n_taxa == 1) %>%
  ungroup() %>%
  
  # Take the top level that has one taxon
  group_by(cluster_ID) %>%
  mutate(n = row_number()) %>%
  filter(n == 1) %>%
  ungroup() %>%
  
  count(level) %>%
  mutate(p = n/sum(n)*100)
```

# What percentage of proteins or protein clusters have a hit in AF2
```{r}
af2_mapped


# 34% of proteins are present in the AF2 database. 66% of proteins not observed.
clusters %>%
  filter(cluster_count > 1) %>%
  mutate(status = ifelse(structure_rep %in% af2_mapped, "In AF2", "Not in AF2")) %>%
  count(status) %>%
  mutate(p = n/sum(n)*100)

# 16% of reps are found in AF2, while 83% are not.
clusters %>%
  filter(cluster_count > 1) %>%
  select(structure_rep) %>%
  distinct() %>%
  mutate(status = ifelse(structure_rep %in% af2_mapped, "In AF2", "Not in AF2")) %>%
  count(status) %>%
  mutate(p = n/sum(n)*100)


# How taxonomically distributed across-nonviruses are those AF2 members which viral homologs?



```

# Determine the percentage of proteins at each LCA level that are in a AF2-aligned cluster
```{r}

# Get cluster_IDs for af2_mapped
af2_mapped_cluster_IDs <- clusters %>%
  filter(structure_rep %in% af2_mapped) %>%
  pull(cluster_ID) %>%
  unique()


clusters %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  
  # Filtering for multi-member clusters
  mutate(cluster_count = as.numeric(cluster_count)) %>%
  filter(cluster_count >= 2) %>%
  
  # Get just the taxonomy for each cluster member in each cluster_ID
  select(cluster_ID, cluster_count, superkingdom, phylum, class, order, family, genus, species) %>%
  distinct() %>%
  
  # Pivot longer, remove NA taxa
  pivot_longer(-c("cluster_ID", "cluster_count")) %>%
  rename(level = name, taxon = value) %>%
  filter(!is.na(taxon)) %>%
  
  # Make sure each entry is ordered by taxonomy
  mutate(level = factor(level, ordered = T, levels=rev(c("superkingdom", "phylum", "class", "order", "family", "genus", "species")))) %>%
  arrange(level) %>%
  
  # Counting the number of taxa at each level. Filter for those levels with only one taxon
  group_by(cluster_ID, cluster_count, level) %>%
  summarize(n_taxa = n_distinct(taxon)) %>%
  filter(n_taxa == 1) %>%
  ungroup() %>%
  
  # Take the top level that has one taxon
  group_by(cluster_ID) %>%
  mutate(n = row_number()) %>%
  filter(n == 1) %>%
  ungroup() %>%
  
  mutate(status = ifelse(cluster_ID %in% af2_mapped_cluster_IDs, "Mapped", "Not Mapped")) %>%
  
  group_by(level, status) %>%
  summarize(n = sum(cluster_count)) %>%

  mutate(p = n/sum(n)*100) %>%
  filter(status == "Mapped") %>%
  
  ggplot() +
  
  geom_col(
    aes(y=level, x=p)
  ) +
  xlab("Percentage of Proteins\nAligned to AFDB Clusters")


# Overall conclusions from the two figures:
# 1) Over 30% of viral proteins are in multiple families, and most of these are observed across the tree of life.
# 2) Most of the species-/genus-restricted proteins are not observed elsewhere and are limited to viruses. This shows a viral gene repertoire not present in other kingdoms - implying a large content of unexplored genes here.

```

```{r}
clusters %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  
  # Filtering for multi-member clusters
  mutate(cluster_count = as.numeric(cluster_count)) %>%

  # Get just the taxonomy for each cluster member in each cluster_ID
  select(cluster_ID, cluster_count, superkingdom, phylum, class, order, family, genus, species) %>%
  distinct() %>%
  
  # Pivot longer, remove NA taxa
  pivot_longer(-c("cluster_ID", "cluster_count")) %>%
  rename(level = name, taxon = value) %>%
  filter(!is.na(taxon)) %>%
  
  # Make sure each entry is ordered by taxonomy
  mutate(level = factor(level, ordered = T, levels=rev(c("superkingdom", "phylum", "class", "order", "family", "genus", "species")))) %>%
  arrange(level) %>%
  
  # Counting the number of taxa at each level. Filter for those levels with only one taxon
  group_by(cluster_ID, cluster_count, level) %>%
  summarize(n_taxa = n_distinct(taxon)) %>%
  filter(n_taxa == 1) %>%
  ungroup() %>%
  
  # Take the top level that has one taxon
  group_by(cluster_ID) %>%
  mutate(n = row_number()) %>%
  filter(n == 1) %>%
  ungroup() %>%
  
  mutate(status = ifelse(cluster_ID %in% af2_mapped_cluster_IDs, "Mapped", "Not Mapped")) %>%
  
  group_by(level, status) %>%
  summarize(n = sum(cluster_count)) %>%
  
  group_by(status) %>%
  summarize(count = sum(n))
```


#TMP
```{r}

clusters %>%
  filter(cluster_ID %in% c(28, 55, 56, 735)) %>%
  select(cluster_ID, seq_rep, family) %>%
  distinct()

```




#TMP
```{r}
clusters %>%
  filter(cluster_member == "Interleukin-10__YP_009552536__Eptesicus_fuscus_gammaherpesvirus__2035399")

x <- clusters %>%
  filter(grepl("synthase", cluster_member)) %>%
  select(cluster_ID, family, cluster_member) %>%
  pull(cluster_ID) %>%
  unique()

clusters %>%
  filter(cluster_ID %in% x) %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID)


clusters %>%
  #select(cluster_ID, structure_rep) %>%
  mutate(cluster_ID = as.numeric(cluster_ID)) %>%
  arrange(cluster_ID) %>%
  group_by(cluster_ID, structure_rep) %>%
  summarize(n_fam = n_distinct(family)) %>%
  filter(n_fam > 1)


```




